import ground_zero.HITs.merely ground_zero.types.integer
open ground_zero (iter vect vect.map vect.constant)
open ground_zero.types.eq (renaming rfl -> idp)
open ground_zero.structures (prop)
open ground_zero.types
open ground_zero

local notation `‚Ñ§` := ground_zero.types.integer

hott theory

namespace ground_zero.HITs
universes u v w

def neq {Œ± : Type u} (a b : Œ±) : Type u := a = b ‚Üí (ùüé : Type)

def fin := iter ùüè ùüè
def filled (n : ‚Ñï) := ‚à•fin n‚à•

def network (Œ± : Type u) := graph (@neq Œ±)

@[hott] def network.decode {Œ± : Type u} (H : prop Œ±) : network Œ± ‚Üí Œ± := begin
  fapply graph.ind,
  { exact id },
  { intros x y G, apply ground_zero.proto.empty.elim,
    apply G, apply H }
end

@[hott] def network.prop {Œ± : Type u} (H : prop Œ±) : prop (network Œ±) := begin
  intros x y, fapply graph.ind _ _ x; clear x; intro x,
  { fapply graph.ind _ _ y; clear y; intro y,
    { apply eq.map, apply H },
    { intros z G, apply ground_zero.proto.empty.elim,
      apply G, apply H } },
  { intros z G, apply ground_zero.proto.empty.elim,
    apply G, apply H }
end

@[hott] def network.proplem {Œ± : Type u} (H : prop Œ±) : Œ± ‚âÉ network Œ± := begin
  apply ground_zero.structures.prop_equiv_lemma,
  apply H, apply network.prop H,
  apply graph.elem, apply network.decode H
end

def hull (n : ‚Ñï) := network (fin n)
def hull.elem {n : ‚Ñï} : fin n ‚Üí hull n := graph.elem

abbreviation simplex (Œ± : Type u) := list Œ±
def face {Œ± : Type u} (xs : simplex Œ±) (i : ‚Ñï) : simplex Œ± :=
list.take i xs ++ list.drop (i + 1) xs

def enum.aux {Œ± : Type u} : ‚Ñï ‚Üí list Œ± ‚Üí list ‚Ñï
| _    []     := []
| n (x :: xs) := n :: enum.aux (n + 1) xs
def enum {Œ± : Type u} := @enum.aux Œ± 0

def faces {Œ± : Type u} (xs : simplex Œ±) : list (simplex Œ±) :=
list.map (face xs) (enum xs)

inductive simplex.nonempty {Œ± : Type u} : simplex Œ± ‚Üí Type u
| intro (x : Œ±) (xs : simplex Œ±) : simplex.nonempty (x :: xs)
open simplex (nonempty)

def simplex.head {Œ± : Type u} : Œ† (v : simplex Œ±), nonempty v ‚Üí Œ±
| (x :: xs) _ := x

def simplex.tail {Œ± : Type u} : Œ† (v : simplex Œ±), nonempty v ‚Üí simplex Œ±
| (x :: xs) _ := xs

def faces.nonempty {Œ± : Type u} : Œ† (v : simplex Œ±), nonempty v ‚Üí nonempty (faces v) :=
begin intros v H, induction H with y ys, apply simplex.nonempty.intro end

end ground_zero.HITs