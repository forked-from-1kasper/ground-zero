import ground_zero.HITs.generalized ground_zero.structures
open ground_zero.HITs ground_zero.structures

hott theory

/-
  The unit interval I as Higher Inductive Type.
  Proof of functional extensionality from it.
  * HoTT 6.3

  It is defined as the propositional trunc of bool.
  * HoTT, chapter 6, exercise 6.13
-/

namespace ground_zero
namespace HITs

notation [parsing_only] `ùüê` := bool

def I := {ùüê}
abbreviation interval := I

namespace interval
  universes u v

  def i‚ÇÄ : I := generalized.incl ff
  def i‚ÇÅ : I := generalized.incl tt

  def seg : i‚ÇÄ = i‚ÇÅ := generalized.glue ff tt
  def seg_inv : i‚ÇÅ = i‚ÇÄ := generalized.glue tt ff

  def discrete : bool ‚Üí I := generalized.incl

  instance : has_zero I := ‚ü®i‚ÇÄ‚ü©
  instance : has_one I := ‚ü®i‚ÇÅ‚ü©

  abbreviation left := i‚ÇÄ
  abbreviation right := i‚ÇÅ

  abbreviation zero := i‚ÇÄ
  abbreviation one := i‚ÇÅ

  @[inline, recursor 4]
  def rec {Œ≤ : Sort u} (b‚ÇÄ : Œ≤) (b‚ÇÅ : Œ≤)
    (s : b‚ÇÄ = b‚ÇÅ :> Œ≤) : I ‚Üí Œ≤ :=
  let f (b : bool) : singl b‚ÇÄ :=
    bool.rec (singl.trivial_loop b‚ÇÄ) ‚ü®b‚ÇÅ, s‚ü© b in
  singl.point ‚àò generalized.rec f (begin intros, apply singl.singl_prop end)

  def lift {Œ≤ : Sort u} (f : bool ‚Üí Œ≤) (H : prop Œ≤) : I ‚Üí Œ≤ :=
  generalized.rec f (begin intros, apply H end)

  /- Œ≤ i‚ÇÄ and Œ≤ i‚ÇÅ are Prop‚Äôs,
     so s : b‚ÇÄ = b‚ÇÅ is trivial -/
  def prop_rec {Œ≤ : I ‚Üí Prop} (b‚ÇÄ : Œ≤ i‚ÇÄ) (b‚ÇÅ : Œ≤ i‚ÇÅ) :
    Œ† (x : I), Œ≤ x := begin
    intros, refine quot.ind _ x, intros,
    induction a, apply b‚ÇÄ, apply b‚ÇÅ
  end

  def hrec (Œ≤ : I ‚Üí Sort u)
    (b‚ÇÄ : Œ≤ 0) (b‚ÇÅ : Œ≤ 1) (s : b‚ÇÄ == b‚ÇÅ)
    (x : I) : Œ≤ x :=
  quot.hrec_on x
    (Œª i, bool.rec_on i b‚ÇÄ b‚ÇÅ)
    (Œª a b _,
      begin simp, induction a; induction b; simp,
            apply s, symmetry, apply s end)

  def ind {œÄ : I ‚Üí Sort u} (b‚ÇÄ : œÄ i‚ÇÄ) (b‚ÇÅ : œÄ i‚ÇÅ)
    (s : b‚ÇÄ =[seg] b‚ÇÅ) (x : I) : œÄ x := begin
    refine quot.hrec_on x _ _,
    { intro b, cases b, exact b‚ÇÄ, exact b‚ÇÅ },
    { intros,
      cases a; cases b,
      { reflexivity },
      { simp, apply types.heq.from_pathover, exact s },
      { simp, symmetry,
        apply types.heq.from_pathover, exact s },
      { reflexivity } }
  end

  def interval_contr : contr I := begin
    existsi i‚ÇÅ,
    fapply ind,
    { exact seg‚Åª¬π }, { reflexivity },
    { apply types.equiv.pathover_from_trans,
      apply types.eq.inv_comp }
  end

  def interval_prop : prop I :=
  contr_impl_prop interval_contr

  def seg_inv_comp : seg ‚¨ù seg‚Åª¬π = types.eq.rfl :=
  by apply prop_is_set interval_prop

  def homotopy {Œ± : Sort u} {Œ≤ : Sort v} {f g : Œ± ‚Üí Œ≤}
    (p : f ~ g) (x : Œ±) : I ‚Üí Œ≤ :=
  rec (f x) (g x) (p x)

  def funext {Œ± : Sort u} {Œ≤ : Sort v} {f g : Œ± ‚Üí Œ≤}
    (p : f ~ g) : f = g :> Œ± ‚Üí Œ≤ :=
  let lem := function.swap (homotopy p)
  in lem # seg

  def dfunext {Œ± : Sort u} {Œ≤ : Œ± ‚Üí Sort v}
    {f g : Œ† x, Œ≤ x}
    (p : f ~ g) : f = g :> Œ† x, Œ≤ x :=
  let lem := Œª i x, rec (f x) (g x) (p x) i
  in lem # seg

  def homotopy_from_path {Œ± : Sort u} {Œ≤ : Œ± ‚Üí Sort v}
    {f g : Œ† (x : Œ±), Œ≤ x} (p : f = g) : f ~ g :=
  begin induction p, apply types.equiv.homotopy.id end

  def neg : I ‚Üí I :=
  lift (discrete ‚àò bnot) interval_prop
  prefix `‚àí`:80 := neg
  instance : has_neg I := ‚ü®neg‚ü©

  def bool_to_interval (f : bool ‚Üí bool ‚Üí bool) (a b : I) : I :=
  lift (Œª a, lift (discrete ‚àò f a) interval_prop b) interval_prop a

  def min (a b : I) : I :=
  lift (begin intro x, cases x, exact i‚ÇÄ, exact a end)
        interval_prop b

  def max (a b : I) : I :=
  lift (begin intro x, cases x, exact a, exact i‚ÇÅ end)
        interval_prop b

  notation r `‚àß`:70 s := min r s
  notation r `‚à®`:70 s := max r s
end interval

end HITs
end ground_zero