import ground_zero.types.product ground_zero.structures
open ground_zero.types.equiv (idtoeqv homotopy)
open ground_zero.types.equiv (renaming id -> ideqv)
open ground_zero.types
open ground_zero.structures ground_zero.types.not

/-
  Univalence axiom formulated using equivalence J-rule.

  ua, idtoeqv, comp_rule, prop_uniq
  * HoTT 2.10

  Full univalence: (Œ± ‚âÉ Œ≤) ‚âÉ (Œ± = Œ≤).

  Proof that Type is not a¬†set.
  * HoTT 3.1, example 3.1.9
-/

namespace ground_zero

hott theory

universes u v

axiom J {œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v}
  (h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±))
  {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) : œÄ Œ± Œ≤ e
axiom JŒ≤rule {œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v}
  {h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±)} {Œ± : Type u} :
  J h (ideqv Œ±) = h Œ± :> œÄ Œ± Œ± (ideqv Œ±)

noncomputable abbreviation Jrule
  (œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v)
  (h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±))
  {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) : œÄ Œ± Œ≤ e :=
J h e

noncomputable def ua {Œ± Œ≤ : Type u} : Œ± ‚âÉ Œ≤ ‚Üí Œ± = Œ≤ :=
J idp

namespace ua

@[hott] noncomputable theorem refl_on_ua (Œ± : Type u) :
  ua (ideqv Œ±) = idp Œ± :=
by apply JŒ≤rule

@[hott] noncomputable theorem comp_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ±), x =[ua e] e.fst x := begin
  refine J _ e, intros œà x,
  refine types.eq.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] noncomputable theorem transport_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ±), types.equiv.subst (ua e) x = e.fst x := begin
  refine J _ e, intros œà x,
  refine types.eq.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] noncomputable theorem transport_inv_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ≤), types.equiv.subst_inv (ua e) x = e.backward x := begin
  refine J _ e, intros œà x,
  refine types.eq.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] theorem idtoeqv_and_id {Œ± : Type u} :
  idtoeqv (idp Œ±) = ideqv Œ± :=
by trivial

@[hott] noncomputable theorem prop_uniq {Œ± Œ≤ : Type u} (p : Œ± = Œ≤) :
  ua (idtoeqv p) = p :=
begin induction p, exact JŒ≤rule end

@[hott] noncomputable theorem univalence (Œ± Œ≤ : Type u) :
  (Œ± ‚âÉ Œ≤) ‚âÉ (Œ± = Œ≤) := begin
  existsi ua, split; existsi idtoeqv,
  { intro e,
    refine J _ e,
    intro Œ¥, transitivity,
    apply eq.map idtoeqv, apply JŒ≤rule,
    reflexivity },
  { intro e, apply prop_uniq }
end

-- perfect proof
inductive so : bool ‚Üí Type
| intro : so tt

namespace so
  def absurd {Œ± : Type u} (x : so false) : Œ± := by cases x
  theorem ff_neq_tt (h : ff = tt) : empty :=
  so.absurd (transport so h‚Åª¬π intro)
end so

@[hott] def is_zero : ‚Ñï ‚Üí bool
|      0       := tt
| (nat.succ _) := ff

@[hott] example (h : 0 = 1) : ùüé :=
ff_neq_tt (is_zero # h)‚Åª¬π

@[hott] def succ_neq_zero {n : ‚Ñï} : ¬¨(nat.succ n = 0) :=
Œª h, ff_neq_tt (is_zero # h)

@[hott] def neg_bool_equiv : bool ‚âÉ bool :=
begin existsi bnot, split; existsi bnot; intro x; induction x; trivial end

@[hott] noncomputable theorem universe_not_a_set : ¬¨(hset Type) :=
begin
  intro error,
  let p : bool = bool := ua neg_bool_equiv,
  let h := transport theorems.functions.idfun p tt,
  let g : h = ff := transport_rule neg_bool_equiv tt,
  let oops : h = tt :=
    (Œª p, transport theorems.functions.idfun p tt) #
      (error p (idp bool)),
  let uh_oh : ff = tt := g‚Åª¬π ‚¨ù oops,
  apply ff_neq_tt, exact uh_oh
end

-- exercise 2.17 (i) in HoTT book
@[hott] noncomputable theorem product_equiv‚ÇÅ {Œ± Œ±' Œ≤ Œ≤' : Type u}
  (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') := begin
  have p := ua e‚ÇÅ, have q := ua e‚ÇÇ,
  induction p, induction q, reflexivity
end

@[hott] noncomputable theorem product_equiv‚ÇÇ {Œ± Œ±' Œ≤ Œ≤' : Type u}
  (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') :=
begin
  refine J _ e‚ÇÅ, intro A,
  refine J _ e‚ÇÇ, intro B,
  reflexivity
end

section
  open ground_zero.types.product
  @[hott] theorem product_equiv‚ÇÉ {Œ± Œ±' Œ≤ Œ≤' : Type u}
    (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') := begin
    cases e‚ÇÅ with f H, induction H with linv rinv,
    cases linv with g Œ±‚ÇÅ, induction rinv with h Œ≤‚ÇÅ,
  
    cases e‚ÇÇ with f' H, induction H with linv' rinv',
    cases linv' with g' Œ±‚ÇÇ, induction rinv' with h' Œ≤‚ÇÇ,
  
    existsi (bimap f f'), split,
    { existsi (bimap g g'), intro x,
      induction x with u v,
      apply construction,
      exact Œ±‚ÇÅ u, exact Œ±‚ÇÇ v },
    { existsi (bimap h h'), intro x,
      induction x with u v,
      apply construction,
      exact Œ≤‚ÇÅ u, exact Œ≤‚ÇÇ v }
  end
end

@[hott] theorem family_on_bool {œÄ : bool ‚Üí Type u} :
  (œÄ ff √ó œÄ tt) ‚âÉ Œ† (b : bool), œÄ b := begin
  let construct : (œÄ ff √ó œÄ tt) ‚Üí Œ† (b : bool), œÄ b := begin
    intros x b, cases x with p q,
    cases b, exact p, exact q
  end,
  let deconstruct : (Œ† (b : bool), œÄ b) ‚Üí (œÄ ff √ó œÄ tt) := begin
    intro H, split, exact H ff, exact H tt
  end,
  existsi construct, split; existsi deconstruct,
  { intro x, cases x with p q, reflexivity },
  { intro x, apply theorems.dfunext,
    intro b, induction b,
    repeat { reflexivity } }
end

end ua
end ground_zero