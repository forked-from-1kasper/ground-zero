import ground_zero.HITs.truncation
import ground_zero.types.sigma
open ground_zero.types ground_zero.HITs

namespace ground_zero.theorems.functions
universes u v

hott theory

@[hott] def injective {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œ† x y, f x = f y ‚Üí x = y

@[hott] def fib_inh {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œª b, ‚à•fib f b‚à•

@[hott] def surj {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
fiberwise (fib_inh f)

@[hott] def ran {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
total (fib_inh f)

@[hott] def cut {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : Œ± ‚Üí ran f :=
Œª x, ‚ü®f x, truncation.elem ‚ü®x, eq.rfl‚ü©‚ü©

@[hott] def cut_is_surj {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : surj (cut f) := begin
  intro x, induction x with x h,
  fapply truncation.ind _ _ h,
  { intro g, induction g with y p,
    apply truncation.elem, existsi y,
    fapply sigma.prod, exact p,
    apply truncation.uniq },
  { intro, apply truncation.uniq }
end

@[hott] def ran.subset {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : ran f ‚Üí Œ≤ :=
sigma.fst

@[hott] def ran.incl {Œ± : Type u} {Œ≤ : Type v}
  {f : Œ± ‚Üí Œ≤} (h : surj f) : Œ≤ ‚Üí ran f :=
Œª x, ‚ü®x, h x‚ü©

@[hott] def surj_impl_ran_eqv {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) (h : surj f) : ran f ‚âÉ Œ≤ := begin
  existsi sigma.fst, split; existsi ran.incl h,
  { intro x, induction x with x g,
    fapply sigma.prod, refl,
    apply truncation.uniq },
  { intro x, refl }
end

@[hott] def ran_const {Œ± : Type u} (a : Œ±) {Œ≤ : Type v} (b : Œ≤) :
  ran (function.const Œ± b) :=
‚ü®b, truncation.elem ‚ü®a, eq.rfl‚ü©‚ü©

@[hott] def ran_const_eqv {Œ± : Type u} (a : Œ±) {Œ≤ : Type v}
  (h : ground_zero.structures.hset Œ≤) (b : Œ≤) :
  ran (function.const Œ± b) ‚âÉ ùüè := begin
  existsi (Œª _, ‚òÖ), split; existsi (Œª _, ran_const a b),
  { intro x, induction x with b' inh,
    fapply sigma.prod, change b = b',
    fapply truncation.ind _ _ inh,
    { intro F, induction F with c p, exact p },
    { intro F, exact h },
    { apply truncation.uniq } },
  { intro x, induction x, refl }
end

@[hott] def embedding {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œ† (x y : Œ±), @equiv.biinv (x = y) (f x = f y) (eq.map f)

@[hott] def is_connected (Œ± : Type u) :=
Œ£ (x : Œ±), Œ† y, ‚à•x = y‚à•

end ground_zero.theorems.functions