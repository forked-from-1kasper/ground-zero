import ground_zero.HITs.merely
open ground_zero.structures (hlevel.succ prop)
open ground_zero.types ground_zero.HITs

namespace ground_zero.theorems.functions
universes u v

hott theory

@[hott] def injective {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œ† x y, f x = f y ‚Üí x = y

@[hott] def fib_inh {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œª b, ‚à•fib f b‚à•

@[hott] def surj {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
fiberwise (fib_inh f)

@[hott] def ran {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
total (fib_inh f)

@[hott] def cut {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : Œ± ‚Üí ran f :=
Œª x, ‚ü®f x, merely.elem ‚ü®x, Id.refl‚ü©‚ü©

@[hott] def cut_is_surj {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : surj (cut f) :=
begin
  intro x, induction x with x h,
  fapply merely.ind _ _ h,
  { intro g, induction g with y p,
    apply merely.elem, existsi y,
    fapply sigma.prod, exact p,
    apply merely.uniq },
  { intro, apply merely.uniq }
end

@[hott] def ran.subset {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : ran f ‚Üí Œ≤ :=
sigma.fst

@[hott] def ran.incl {Œ± : Type u} {Œ≤ : Type v}
  {f : Œ± ‚Üí Œ≤} (h : surj f) : Œ≤ ‚Üí ran f :=
Œª x, ‚ü®x, h x‚ü©

@[hott] def surj_impl_ran_eqv {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) (h : surj f) : ran f ‚âÉ Œ≤ :=
begin
  existsi sigma.fst, split; existsi ran.incl h,
  { intro x, induction x with x g,
    fapply sigma.prod, refl,
    apply merely.uniq },
  { intro x, refl }
end

@[hott] def ran_const {Œ± : Type u} (a : Œ±) {Œ≤ : Type v} (b : Œ≤) :
  ran (function.const Œ± b) :=
‚ü®b, merely.elem ‚ü®a, Id.refl‚ü©‚ü©

@[hott] def ran_const_eqv {Œ± : Type u} (a : Œ±) {Œ≤ : Type v}
  (h : ground_zero.structures.hset Œ≤) (b : Œ≤) :
  ran (function.const Œ± b) ‚âÉ ùüè :=
begin
  existsi (Œª _, ‚òÖ), split; existsi (Œª _, ran_const a b),
  { intro x, induction x with b' inh,
    fapply sigma.prod, change b = b',
    fapply merely.ind _ _ inh,
    { intro F, induction F with c p, exact p },
    { intro F, exact h },
    { apply merely.uniq } },
  { intro x, induction x, refl }
end

@[hott] def embedding (Œ± : Type u) (Œ≤ : Type v) :=
Œ£ (f : Œ± ‚Üí Œ≤), Œ† x y, @equiv.biinv (x = y) (f x = f y) (Id.map f)

infix ` ‚Ü™ `:50 := embedding

section
  variables {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Ü™ Œ≤)

  def embedding.ap : Œ± ‚Üí Œ≤ := f.fst
  def embedding.eqv (x y : Œ±) : (x = y) ‚âÉ (f.ap x = f.ap y) :=
  ‚ü®Id.map f.ap, f.snd x y‚ü©
end

@[hott] def ntype_over_embedding {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Ü™ Œ≤) (n : ‚Ñï‚Çã‚ÇÇ) : is-(hlevel.succ n)-type Œ≤ ‚Üí is-(hlevel.succ n)-type Œ± :=
begin
  intros H x y, apply ground_zero.structures.ntype_respects_equiv,
  { symmetry, apply f.eqv }, apply H
end

@[hott] def eqv_map_forward {Œ± : Type u} {Œ≤ : Type v} (e : Œ± ‚âÉ Œ≤)
  (x y : Œ±) (p : e.forward x = e.forward y) : x = y :=
(e.left_forward x)‚Åª¬π ‚¨ù (@Id.map Œ≤ Œ± _ _ e.left p) ‚¨ù (e.left_forward y)

@[hott] def sigma_prop_eq {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : Œ† x, prop (Œ≤ x)) {x y : sigma Œ≤} (p : x.fst = y.fst) : x = y :=
begin fapply ground_zero.types.sigma.prod, exact p, apply H end

@[hott] def prop_sigma_embedding {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : Œ† x, prop (Œ≤ x)) : (Œ£ x, Œ≤ x) ‚Ü™ Œ± :=
begin
  existsi sigma.fst, intros x y, split; existsi sigma_prop_eq H,
  { intro p, induction x, induction y, induction p,
    change ground_zero.types.sigma.prod _ _ = _,
    transitivity, apply Id.map, change _ = idp _,
    apply ground_zero.structures.prop_is_set,
    apply H, reflexivity },
  { intro p, induction x with x X, induction y with y Y,
    change x = y at p, induction p,
    have q := H x X Y, induction q,
    change Id.map sigma.fst (ground_zero.types.sigma.prod _ _) = _,
    transitivity, apply Id.map (Id.map sigma.fst),
    apply Id.map, change _ = idp _,
    apply ground_zero.structures.prop_is_set,
    apply H, reflexivity }
end

@[hott] def is_connected (Œ± : Type u) :=
Œ£ (x : Œ±), Œ† y, ‚à•x = y‚à•

end ground_zero.theorems.functions