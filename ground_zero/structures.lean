import ground_zero.types.unit ground_zero.types.coproduct
import ground_zero.theorems.funext
open ground_zero.types.unit

hott theory

namespace ground_zero

namespace structures
universes u v w

def is_loop {Œ± : Type u} {a : Œ±} (p : a = a) := ¬¨(p = types.eq.refl a)

def prop (Œ± : Type u) :=
Œ† (a b : Œ±), a = b :> Œ±

def propset := Œ£ (Œ± : Type u), prop Œ±
notation `‚Ñ¶` := propset

def hset (Œ± : Type u) :=
Œ† {a b : Œ±} (p q : a = b), p = q
def Ens := Œ£ Œ±, hset Œ±

def groupoid (Œ± : Type u) :=
Œ† {a b : Œ±} {p q : a = b} (Œ± Œ≤ : p = q), Œ± = Œ≤

def dec (Œ± : Type u) := Œ± + ¬¨Œ±

structure contr (Œ± : Type u) :=
(point : Œ±) (intro : Œ† (a : Œ±), point = a :> Œ±)
--  or we can write `idfun ~ Œª _, point`

def LEM := Œ† (Œ± : Type w), prop Œ± ‚Üí (Œ± + ¬¨Œ±)
def law_of_double_negation :=
Œ† (Œ± : Type u), prop Œ± ‚Üí (¬¨¬¨Œ± ‚Üí Œ±)

def LEM_inf := Œ† (Œ± : Type u), Œ± + ¬¨Œ±
notation `LEM‚àû` := LEM_inf

inductive level
| minus_two
| succ : level ‚Üí level

notation `‚Ñï‚Çã‚ÇÇ` := level
notation `‚àí2` := level.minus_two
notation `‚àí1` := level.succ ‚àí2

instance : has_zero level := ‚ü®level.succ ‚àí1‚ü©
instance : has_one  level := ‚ü®level.succ 0‚ü©

namespace level
  inductive le : level ‚Üí level ‚Üí Type
  | refl (a : level)   : le a a
  | step (a b : level) : le a b ‚Üí le a (succ b)
  infix ` ‚â§ ` := le

  def le.minus_two (a : level) : ‚àí2 ‚â§ a := begin
    induction a with a ih,
    { apply le.refl },
    { apply le.step, assumption }
  end

  def le.succ (a b : level) : a ‚â§ b ‚Üí succ a ‚â§ succ b := begin
    intro h, induction h with c a' b' h ih,
    { apply le.refl },
    { apply le.step, assumption }
  end

  def add : level ‚Üí level ‚Üí level
  | (succ (succ n)) ‚àí2 := n
  | ‚àí1 ‚àí2 := ‚àí2
  | ‚àí2 ‚àí2 := ‚àí2
  | n 0 := n
  | n (succ m) := succ (add n m)
  instance : has_add level := ‚ü®level.add‚ü©

  def of_nat : ‚Ñï ‚Üí ‚Ñï‚Çã‚ÇÇ
  |    0    := 0
  | (n + 1) := level.succ (of_nat n)
end level

def is_n_type : level ‚Üí Type u ‚Üí Type u
| level.minus_two := contr
| (level.succ n)  := Œª Œ±, Œ† (x y : Œ±), is_n_type n (x = y)
notation [parsing_only] `is-` n `-type ` Œ± := is_n_type n Œ±

def n_type (n : level) :=
Œ£ (Œ± : Type u), is_n_type n Œ±
notation n `-Type` := n_type n

@[hott] def level.cumulative (n : level) : Œ† {Œ± : Type u},
  (is-n-type Œ±) ‚Üí is-(level.succ n)-type Œ± := begin
  induction n with n ih; intros Œ± h,
  { induction h with a‚ÇÄ p,
    intros x y, existsi (p x)‚Åª¬π ‚¨ù p y,
    intro q, induction q, apply types.eq.inv_comp },
  { intros x y, apply ih, apply h }
end

@[hott] def level.strong_cumulative (n m : level) (h : n ‚â§ m) :
  Œ† {Œ± : Type u}, (is-n-type Œ±) ‚Üí (is-m-type Œ±) := begin
  induction h with c a' b' h ih,
  { intros, assumption },
  { intros Œ± g, apply level.cumulative,
    apply ih, assumption }
end

@[hott] def contr_impl_prop {Œ± : Type u} (h : contr Œ±) : prop Œ± :=
Œª a b, (h.intro a)‚Åª¬π ‚¨ù (h.intro b)

def empty_is_prop : prop ùüé :=
begin intros x, induction x end

def unit_is_prop : prop ùüè :=
begin intros x y, induction x, induction y, trivial end

@[hott] def contr_equiv_unit {Œ± : Type u} (h : contr Œ±) : Œ± ‚âÉ ùüè := begin
  existsi (Œª _, ‚òÖ), split;
  existsi (Œª _, h.point),
  { intro x, apply h.intro },
  { intro x, cases x, reflexivity }
end

@[hott] def prod_unit_equiv (Œ± : Type u) : ùüè √ó Œ± ‚âÉ Œ± := begin
  existsi prod.snd, split;
  existsi prod.mk ‚òÖ,
  { intro x, induction x with a b,
    induction a, trivial },
  { intro x, trivial }
end

def bool_to_universe : bool ‚Üí Type
| tt := ùüè
| ff := ùüé

@[hott] def ff_neq_tt : ¬¨(ff = tt) :=
Œª h, ground_zero.types.equiv.transport bool_to_universe h‚Åª¬π ‚òÖ

@[hott] theorem function_space : ¬¨(Œ† {Œ± Œ≤ : Type}, prop (Œ± ‚Üí Œ≤)) :=
Œª h, ff_neq_tt (types.equiv.homotopy.eq (h id bnot) ff)

@[hott] theorem auto_contr {Œ± : Type u} (x : Œ±)
  (h : prop (Œ± ‚Üí Œ±)) : prop Œ± := begin
  apply contr_impl_prop, existsi x,
  apply types.equiv.homotopy.eq,
  apply h
end

section
  open types.equiv types.eq
  @[hott] def prop_is_set {Œ± : Type u} (r : prop Œ±) : hset Œ± := begin
    intros x y p q, have g := r x,
    transitivity, symmetry, apply rewrite_comp,
    exact (apd g p)‚Åª¬π ‚¨ù transport_composition p (g x),
    induction q, apply inv_comp
  end

  @[hott] def set_impl_groupoid {Œ± : Type u} (r : hset Œ±) : groupoid Œ± := begin
    intros a b p q Œ∑ Œº, have g := r p,
    transitivity, symmetry, apply rewrite_comp,
    transitivity, symmetry, exact apd g Œ∑, apply transport_composition,
    induction Œº, apply inv_comp
  end

  @[hott] def empty_is_set : hset ùüé :=
  begin apply prop_is_set, apply empty_is_prop end
  @[hott] def unit_is_set : hset ùüè :=
  begin apply prop_is_set, apply unit_is_prop end

  @[hott] def contr_is_prop {Œ± : Type u} : prop (contr Œ±) := begin
    intros x y, cases x with x u, cases y with y v,
    have p := u y, induction p, apply types.eq.map,
    apply theorems.dfunext, intro a,
    apply prop_is_set (contr_impl_prop ‚ü®x, u‚ü©)
  end

  @[hott] def prop_is_prop {Œ± : Type u} : prop (prop Œ±) := begin
    intros f g, repeat { apply theorems.dfunext, intro },
    apply prop_is_set, assumption
  end

  @[hott] def set_is_prop {Œ± : Type u} : prop (hset Œ±) := begin
    intros f g, repeat { apply theorems.dfunext, intro },
    apply set_impl_groupoid, assumption
  end

  @[hott] def ntype_is_prop (n : level) : Œ† {Œ± : Type u}, prop (is-n-type Œ±) := begin
    induction n with n ih,
    { apply contr_is_prop },
    { intros Œ± p q, apply theorems.dfunext,
      intro x, apply theorems.dfunext, intro y,
      apply ih }
  end

  @[hott] def function_to_contr {Œ± : Type u} : prop (Œ± ‚Üí contr Œ±) := begin
    intros f g, apply theorems.funext, intro x, apply contr_is_prop
  end
end

inductive squash' (Œ± : Type u) : Prop
| elem : Œ± ‚Üí squash'

inductive lift (Œ± : Prop) : Type
| elem : Œ± ‚Üí lift

def squash := lift ‚àò squash'

def squash.elem {Œ± : Type u} : Œ± ‚Üí squash Œ± :=
lift.elem ‚àò squash'.elem

def squash.uniq {Œ± : Type u} (a b : squash Œ±) : a = b :=
begin induction a, induction b, trivial end

def squash.prop {Œ± : Type u} {Œ≤ : Prop}
  (f : Œ± ‚Üí Œ≤) : squash Œ± ‚Üí Œ≤ :=
begin intro h, repeat { induction h }, apply f h end

def squash.lift {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : squash Œ± ‚Üí squash Œ≤ :=
lift.elem ‚àò squash.prop (squash'.elem ‚àò f)

def K (Œ± : Type u) :=
Œ† (a : Œ±) (p : a = a :> Œ±), p = types.eq.refl a :> a = a :> Œ±

@[hott] theorem K_iff_set (Œ± : Type u) : K Œ± ‚Üî hset Œ± := begin
  split,
  { intro h, intros x y p q,
    induction q, apply h },
  { intros h a p, apply h }
end

@[hott] def lem_prop {Œ± : Type u} (h : Œ± ‚Üí prop Œ±) : prop Œ± :=
Œª a, h a a

@[hott] def lem_contr {Œ± : Type u} (h : Œ± ‚Üí contr Œ±) : prop Œ± :=
Œª a, contr_impl_prop (h a) a

def is_contr_fiber {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œ† (y : Œ≤), contr (types.fib f y)

@[hott] def prop_equiv_lemma {Œ± : Type u} {Œ≤ : Type v}
  (F : prop Œ±) (G : prop Œ≤) (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ±) : Œ± ‚âÉ Œ≤ :=
begin
  existsi f, split; existsi g,
  { intro x, apply F }, { intro y, apply G }
end

@[hott] def minus_two_eqv_contr {Œ± : Type u} : (is-(‚àí2)-type Œ±) ‚âÉ contr Œ± :=
by refl

@[hott] def minus_one_eqv_prop {Œ± : Type u} : (is-(‚àí1)-type Œ±) ‚âÉ prop Œ± := begin
  apply prop_equiv_lemma, apply ntype_is_prop, apply prop_is_prop,
  { intros h a b, exact (h a b).point },
  { intros h a b, existsi h a b, apply prop_is_set h }
end

@[hott] def equiv_funext {Œ± : Type u} {Œ∑ Œº : Œ± ‚Üí Type v}
  (h : Œ† x, Œ∑ x ‚âÉ Œº x) : (Œ† x, Œ∑ x) ‚âÉ (Œ† x, Œº x) := begin
  existsi (Œª (f : Œ† x, Œ∑ x) (x : Œ±), (h x).forward (f x)), split,
  { existsi (Œª (f : Œ† x, Œº x) (x : Œ±), (h x).left (f x)),
    intro f, apply theorems.dfunext,
    intro x, apply (h x).left_forward },
  { existsi (Œª (f : Œ† x, Œº x) (x : Œ±), (h x).right (f x)),
    intro f, apply theorems.dfunext,
    intro x, apply (h x).forward_right }
end

@[hott] def zero_eqv_set {Œ± : Type u} : (is-0-type Œ±) ‚âÉ hset Œ± := calc
  (is-0-type Œ±) ‚âÉ (Œ† x y, is-(‚àí1)-type (x = y)) : by reflexivity
            ... ‚âÉ (Œ† (x y : Œ±), prop (x = y)) :
                  begin apply equiv_funext, intro x,
                        apply equiv_funext, intro y,
                        apply minus_one_eqv_prop end
            ... ‚âÉ hset Œ± : by reflexivity

@[hott] def one_eqv_groupoid {Œ± : Type u} : (is-1-type Œ±) ‚âÉ groupoid Œ± := calc
  (is-1-type Œ±) ‚âÉ (Œ† x y, is-0-type (x = y)) : by reflexivity
            ... ‚âÉ (Œ† (x y : Œ±), hset (x = y)) :
                   begin apply equiv_funext, intro x,
                         apply equiv_funext, intro y,
                         apply zero_eqv_set end
            ... ‚âÉ groupoid Œ± : by reflexivity

end structures

-- http://www.cs.bham.ac.uk/~mhe/truncation-and-extensionality/tiny-library.html
-- http://www.cs.bham.ac.uk/~mhe/truncation-and-extensionality/hsetfunext.html
structure {u} singl {Œ± : Type u} (a : Œ±) :=
(point : Œ±) (intro : a = point :> Œ±)

namespace singl
universe u

def trivial_loop {Œ± : Type u} (a : Œ±) : singl a :=
‚ü®a, by reflexivity‚ü©

@[hott] def path_from_trivial_loop {Œ± : Type u} {a b : Œ±}
  (r : a = b :> Œ±) : (trivial_loop a) = ‚ü®b, r‚ü© :> singl a :=
begin induction r, trivial end

@[hott] def singl.eq {Œ± : Type u} {a : Œ±} (t : singl a) :
  { point := t.point, intro := t.intro } = t :> singl a :=
begin induction t, trivial end

@[hott] def signl_contr {Œ± : Type u} (a : Œ±) : structures.contr (singl a) :=
{ point := trivial_loop a,
  intro := Œª t, path_from_trivial_loop t.intro ‚¨ù singl.eq t }

@[hott] def singl_prop {Œ± : Type u} (a : Œ±) : structures.prop (singl a) :=
structures.contr_impl_prop (signl_contr a)

end singl

end ground_zero