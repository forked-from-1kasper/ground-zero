import ground_zero.types.unit ground_zero.types.coproduct
open ground_zero.types.unit

hott theory

namespace ground_zero

namespace structures
universes u v

def is_loop {Œ± : Sort u} {a : Œ±} (p : a = a) := ¬¨(p = types.eq.refl a)

def prop (Œ± : Sort u) :=
Œ† (a b : Œ±), a = b :> Œ±

def propset : Type u := Œ£' (Œ± : Sort u), prop Œ±
notation `‚Ñ¶` := propset

def hset (Œ± : Sort u) :=
Œ† {a b : Œ±} (p q : a = b :> Œ±), p = q :> a = b :> Œ±

def dec (Œ± : Sort u) := Œ± + ¬¨Œ±

structure contr (Œ± : Sort u) :=
(point : Œ±) (intro : Œ† (a : Œ±), point = a :> Œ±)
--  or we can write `idfun ~ Œª _, point`

def {w} LEM := Œ† (Œ± : Sort w), prop Œ± ‚Üí (Œ± + ¬¨Œ±)
def law_of_double_negation :=
Œ† (Œ± : Sort u), prop Œ± ‚Üí (¬¨¬¨Œ± ‚Üí Œ±)

def LEM_inf := Œ† (Œ± : Sort u), Œ± + ¬¨Œ±
notation `LEM‚àû` := LEM_inf

inductive homotopy_level
| minus_two
| succ : homotopy_level ‚Üí homotopy_level

notation `‚àí2` := homotopy_level.minus_two
notation `‚àí1` := homotopy_level.succ ‚àí2

instance : has_zero homotopy_level := ‚ü®homotopy_level.succ ‚àí1‚ü©

def level_to_n : homotopy_level ‚Üí ‚Ñï
| homotopy_level.minus_two := 0
| (homotopy_level.succ n) := level_to_n n + 1

def n_to_level : ‚Ñï ‚Üí homotopy_level
| 0 := homotopy_level.minus_two
| (n + 1) := homotopy_level.succ (n_to_level n)

def is_n_type : Sort u ‚Üí homotopy_level ‚Üí Sort (max 1 u)
| Œ± homotopy_level.minus_two := contr Œ±
| Œ± (homotopy_level.succ n) := Œ† (x y : Œ±),
  is_n_type (x = y :> Œ±) n

def n_type (n : homotopy_level) :=
Œ£' (Œ± : Sort u), is_n_type Œ± n
notation n `-Type` := n_type n

def contr_impl_prop {Œ± : Sort u} (h : contr Œ±) : prop Œ± :=
Œª a b, (h.intro a)‚Åª¬π ‚¨ù (h.intro b)

def empty_is_prop : prop ùüé :=
begin intros x, induction x end

def unit_is_prop : prop ùüè :=
begin intros x y, induction x, induction y, trivial end

def prop_impl_prop {Œ± : Prop} : prop Œ± :=
begin intros x y, trivial end

def bool_to_universe : bool ‚Üí Type
| tt := ùüè
| ff := ùüé

def ff_neq_tt : ¬¨(ff = tt) :=
Œª h, ground_zero.types.equiv.transport bool_to_universe h‚Åª¬π ‚òÖ

theorem function_space : ¬¨(Œ† {Œ± Œ≤ : Type}, prop (Œ± ‚Üí Œ≤)) :=
Œª h, ff_neq_tt (types.equiv.homotopy.eq (h id bnot) ff)

theorem auto_contr {Œ± : Sort u} (x : Œ±) (h : prop (Œ± ‚Üí Œ±)) : prop Œ± :=
begin
  apply contr_impl_prop, existsi x,
  apply types.equiv.homotopy.eq,
  apply h
end

section
  open types.equiv types.eq
  def prop_is_set {Œ± : Sort u} (r : prop Œ±) : hset Œ± := begin
    intros x y p q, have g := r x,
    transitivity, symmetry, apply rewrite_comp,
    exact (apd g p)‚Åª¬π ‚¨ù transport_composition p (g x),
    induction q, apply inv_comp
  end

  def empty_is_set : hset ùüé :=
  begin apply prop_is_set, apply empty_is_prop end
  def unit_is_set : hset ùüè :=
  begin apply prop_is_set, apply unit_is_prop end

  -- unsafe postulate, but it computes
  def function_extensionality {Œ± : Sort u} {Œ≤ : Œ± ‚Üí Sort v}
    {f g : Œ† x, Œ≤ x} (h : f ~ g) : f = g :> Œ† x, Œ≤ x :=
  support.inclusion $ funext (Œª x, support.truncation (h x))

  def contr_is_prop {Œ± : Sort u} : prop (contr Œ±) := begin
    intros x y, cases x with x u, cases y with y v,
    have p := u y, induction p, apply types.eq.map,
    apply function_extensionality, intro a,
    apply prop_is_set (contr_impl_prop ‚ü®x, u‚ü©)
  end

  def prop_is_prop {Œ± : Sort u} : prop (prop Œ±) := begin
    intros f g,
    have p := Œª a b, (prop_is_set f) (f a b) (g a b),
    apply function_extensionality, intro a,
    apply function_extensionality, intro b,
    exact p a b
  end

  def function_to_contr {Œ± : Sort u} : prop (Œ± ‚Üí contr Œ±) := begin
    intros f g, apply function_extensionality, intro x, apply contr_is_prop
  end
end

inductive squash (Œ± : Sort u) : Prop
| elem : Œ± ‚Üí squash
def squash.uniq {Œ± : Sort u} (a b : squash Œ±) : a = b :> squash Œ± :=
types.eq.rfl

def squash.prop {Œ± : Sort u} {Œ≤ : Prop}
  (f : Œ± ‚Üí Œ≤) : squash Œ± ‚Üí Œ≤ :=
begin intro h, cases h, apply f h end

def squash.lift {Œ± : Sort u} {Œ≤ : Sort v}
  (f : Œ± ‚Üí Œ≤) : squash Œ± ‚Üí squash Œ≤ :=
squash.prop (squash.elem ‚àò f)

def K (Œ± : Sort u) :=
Œ† (a : Œ±) (p : a = a :> Œ±), p = types.eq.refl a :> a = a :> Œ±

theorem K_iff_set (Œ± : Sort u) : K Œ± ‚Üî hset Œ± := begin
  split,
  { intro h, intros x y p q,
    induction q, apply h },
  { intro h, unfold K,
    intros, apply h }
end

def lem_prop {Œ± : Sort u} (h : Œ± ‚Üí prop Œ±) : prop Œ± :=
Œª a, h a a

def lem_contr {Œ± : Sort u} (h : Œ± ‚Üí contr Œ±) : prop Œ± :=
Œª a, contr_impl_prop (h a) a

def is_contr_fiber {Œ± : Sort u} {Œ≤ : Sort v} (f : Œ± ‚Üí Œ≤) :=
Œ† (y : Œ≤), contr (types.fib f y)

def prop_equiv_lemma {Œ± : Sort u} {Œ≤ : Sort v}
  (F : prop Œ±) (G : prop Œ≤) (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ±) : Œ± ‚âÉ Œ≤ :=
begin
  existsi f, split; existsi g,
  { intro x, apply F }, { intro y, apply G }
end

end structures

-- http://www.cs.bham.ac.uk/~mhe/truncation-and-extensionality/tiny-library.html
-- http://www.cs.bham.ac.uk/~mhe/truncation-and-extensionality/hsetfunext.html
structure {u} singl {Œ± : Sort u} (a : Œ±) :=
(point : Œ±) (intro : a = point :> Œ±)

namespace singl
universe u

def trivial_loop {Œ± : Sort u} (a : Œ±) : singl a :=
‚ü®a, by reflexivity‚ü©

def path_from_trivial_loop {Œ± : Sort u} {a b : Œ±}
  (r : a = b :> Œ±) : (trivial_loop a) = ‚ü®b, r‚ü© :> singl a :=
begin induction r, trivial end

def singl.eq {Œ± : Sort u} {a : Œ±} (t : singl a) :
  { point := t.point, intro := t.intro } = t :> singl a :=
begin induction t, simp end

def signl_contr {Œ± : Sort u} (a : Œ±) : structures.contr (singl a) :=
{ point := trivial_loop a,
  intro := Œª t, path_from_trivial_loop t.intro ‚¨ù singl.eq t }

def singl_prop {Œ± : Sort u} (a : Œ±) : structures.prop (singl a) :=
structures.contr_impl_prop (signl_contr a)

end singl

end ground_zero