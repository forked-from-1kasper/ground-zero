import ground_zero.algebra.group ground_zero.theorems.prop
open ground_zero.theorems.functions ground_zero.theorems.prop
open ground_zero.structures
open ground_zero.types.eq (dotted)
open ground_zero.types

namespace ground_zero.algebra
universes u v

hott theory

private structure K1.aux :=
(val : ùüè)

def K1 (Œ± : Type u) [group Œ±] := K1.aux

namespace K1
  variables {Œ± : Type u} [group Œ±]

  attribute [nothott] K1.aux.rec_on K1.aux.rec aux.val

  @[hott] def base : K1 Œ± := ‚ü®‚òÖ‚ü©

  axiom grpd     : groupoid (K1 Œ±)
  axiom loop     : Œ± ‚Üí (base = base :> K1 Œ±)
  axiom loop.mul : Œ† (x y : Œ±), loop (x * y) = loop x ‚¨ù loop y

  @[safe] def ind {œÄ : K1 Œ± ‚Üí Type v}
    (baseœÄ : œÄ base) (loopœÄ : Œ† (x : Œ±), baseœÄ =[loop x] baseœÄ)
    (mulœÄ : Œ† (x y : Œ±),
      loopœÄ (x * y) =[Œª p, baseœÄ =[p] baseœÄ, loop.mul x y]
        loopœÄ x ‚¨ù' loopœÄ y)
    (groupoidœÄ : Œ† x, groupoid (œÄ x)) : Œ† x, œÄ x
  | ‚ü®‚òÖ‚ü© := baseœÄ

  @[safe] def rec {œÄ : Type v} (baseœÄ : œÄ)
    (loopœÄ : Œ± ‚Üí baseœÄ = baseœÄ)
    (mulœÄ : Œ† x y, loopœÄ (x * y) = loopœÄ x ‚¨ù loopœÄ y)
    (groupoidœÄ : groupoid œÄ) : K1 Œ± ‚Üí œÄ
  | ‚ü®‚òÖ‚ü© := baseœÄ

  axiom indŒ≤rule {œÄ : K1 Œ± ‚Üí Type v}
    (baseœÄ : œÄ base) (loopœÄ : Œ† (x : Œ±), baseœÄ =[loop x] baseœÄ)
    (mulœÄ : Œ† (x y : Œ±),
      loopœÄ (x * y) =[Œª p, baseœÄ =[p] baseœÄ, loop.mul x y]
        loopœÄ x ‚¨ù' loopœÄ y)
    (groupoidœÄ : Œ† x, groupoid (œÄ x)) :
    Œ† x, equiv.apd (ind baseœÄ loopœÄ mulœÄ groupoidœÄ) (loop x) = loopœÄ x

  axiom recŒ≤rule {œÄ : Type v} (baseœÄ : œÄ) (loopœÄ : Œ± ‚Üí baseœÄ = baseœÄ)
    (mulœÄ : Œ† x y, loopœÄ (x * y) = loopœÄ x ‚¨ù loopœÄ y) (groupoidœÄ : groupoid œÄ) :
    Œ† x, (rec baseœÄ loopœÄ mulœÄ @groupoidœÄ) # (loop x) = loopœÄ x

  attribute [irreducible] K1

  instance : dotted (K1 Œ±) := ‚ü®base‚ü©

  instance : has_mul (Œ©¬π(K1 Œ±)) := ‚ü®Œª p q, p ‚¨ù q‚ü©
  instance : has_one (Œ©¬π(K1 Œ±)) := ‚ü®idp base‚ü©
  instance : has_inv (Œ©¬π(K1 Œ±)) := ‚ü®eq.inv‚ü©

  noncomputable instance : magma (Œ©¬π(K1 Œ±)) :=
  begin split, apply grpd end

  noncomputable instance : semigroup (Œ©¬π(K1 Œ±)) :=
  begin split, intros p q r, symmetry, apply eq.assoc end

  noncomputable instance : monoid (Œ©¬π(K1 Œ±)) := begin
    split; intro p, apply eq.refl_left, apply eq.refl_right
  end

  noncomputable instance : group (Œ©¬π(K1 Œ±)) :=
  begin split, intro p, apply eq.inv_comp end

  noncomputable def homomorphism : Œ± ‚§≥ Œ©¬π(K1 Œ±) :=
  ‚ü®loop, loop.mul‚ü©

  noncomputable def loop.one : loop 1 = idp base :> Œ©¬π(K1 Œ±) :=
  by apply group.homo_saves_unit homomorphism

  noncomputable def loop.inv (p : Œ©¬π(K1 Œ±)) : loop p‚Åª¬π = (loop p)‚Åª¬π :=
  by apply group.homo_respects_inv homomorphism

  @[hott] noncomputable def ntype_is_succ_n_type (n : ‚Ñï‚Çã‚ÇÇ) :
    is-(hlevel.succ n)-type (n-Type) := begin
    intros x y,
    induction x with X p, induction y with Y p',
    apply ntype_respects_equiv,
    symmetry, apply sigma.sigma_path,
    { fapply ntype_respects_sigma,
      { apply ntype_respects_equiv,
        exact ground_zero.ua.univalence X Y,
        induction n with n ih,
        { existsi contr_type_equiv p p',
          intro e, fapply sigma.prod,
          { apply ground_zero.theorems.funext,
            intro x, apply contr_impl_prop, exact p' },
          { apply biinv_prop } },
        { fapply ntype_over_embedding equiv.forward,
          { apply prop_sigma_embedding, apply biinv_prop },
          { apply pi_respects_ntype (hlevel.succ n),
            intro x, apply p' } } },
      { intros q, apply ground_zero.structures.prop_is_ntype,
        apply ntype_is_prop } }
  end
end K1

end ground_zero.algebra