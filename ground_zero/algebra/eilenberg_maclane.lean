import ground_zero.algebra.group ground_zero.theorems.prop
open ground_zero.theorems.functions ground_zero.theorems.prop
open ground_zero.types.equiv (idtoeqv)
open ground_zero.types.Id (dotted)
open ground_zero.ua (uaŒ≤rule)
open ground_zero.structures
open ground_zero.types
open ground_zero (ua)

namespace ground_zero.algebra
universes u v

hott theory

@[hott] noncomputable def ntype_is_succ_n_type (n : ‚Ñï‚Çã‚ÇÇ) :
  is-(hlevel.succ n)-type (n_type.{u} n) := begin
  intros x y,
  induction x with X p, induction y with Y p',
  apply ntype_respects_equiv,
  symmetry, apply sigma.sigma_path,
  { fapply ntype_respects_sigma,
    { apply ntype_respects_equiv,
      exact ground_zero.ua.univalence X Y,
      induction n with n ih,
      { existsi contr_type_equiv p p',
        intro e, fapply sigma.prod,
        { apply ground_zero.theorems.funext,
          intro x, apply contr_impl_prop, exact p' },
        { apply biinv_prop } },
      { fapply ntype_over_embedding equiv.forward,
        { apply prop_sigma_embedding, apply biinv_prop },
        { apply pi_respects_ntype (hlevel.succ n),
          intro x, apply p' } } },
    { intros q, apply ground_zero.structures.prop_is_ntype,
      apply ntype_is_prop } }
end

@[hott] noncomputable def ens_is_groupoid : groupoid (0-Type) :=
begin apply one_eqv_groupoid.forward, apply ntype_is_succ_n_type 0 end

private structure K1.aux :=
(val : ùüè)

def K1 (Œ± : Type u) [group Œ±] := K1.aux

namespace K1
  variables {Œ± : Type u} [group Œ±]

  attribute [nothott] K1.aux.rec_on K1.aux.rec aux.val

  @[hott] def base : K1 Œ± := ‚ü®‚òÖ‚ü©

  axiom grpd     : groupoid (K1 Œ±)
  axiom loop     : Œ± ‚Üí (base = base :> K1 Œ±)
  axiom loop.mul : Œ† (x y : Œ±), loop (x * y) = loop x ‚¨ù loop y

  @[safe] def ind {œÄ : K1 Œ± ‚Üí Type v}
    (baseœÄ : œÄ base) (loopœÄ : Œ† (x : Œ±), baseœÄ =[loop x] baseœÄ)
    (mulœÄ : Œ† (x y : Œ±),
      loopœÄ (x * y) =[Œª p, baseœÄ =[p] baseœÄ, loop.mul x y]
        loopœÄ x ‚¨ù' loopœÄ y)
    (groupoidœÄ : Œ† x, groupoid (œÄ x)) : Œ† x, œÄ x
  | ‚ü®‚òÖ‚ü© := baseœÄ

  @[safe] def rec {œÄ : Type v} (baseœÄ : œÄ)
    (loopœÄ : Œ± ‚Üí baseœÄ = baseœÄ)
    (mulœÄ : Œ† x y, loopœÄ (x * y) = loopœÄ x ‚¨ù loopœÄ y)
    (groupoidœÄ : groupoid œÄ) : K1 Œ± ‚Üí œÄ
  | ‚ü®‚òÖ‚ü© := baseœÄ

  axiom indŒ≤rule {œÄ : K1 Œ± ‚Üí Type v}
    (baseœÄ : œÄ base) (loopœÄ : Œ† (x : Œ±), baseœÄ =[loop x] baseœÄ)
    (mulœÄ : Œ† (x y : Œ±),
      loopœÄ (x * y) =[Œª p, baseœÄ =[p] baseœÄ, loop.mul x y]
        loopœÄ x ‚¨ù' loopœÄ y)
    (groupoidœÄ : Œ† x, groupoid (œÄ x)) :
    Œ† x, equiv.apd (ind baseœÄ loopœÄ mulœÄ groupoidœÄ) (loop x) = loopœÄ x

  axiom recŒ≤rule {œÄ : Type v} (baseœÄ : œÄ) (loopœÄ : Œ± ‚Üí baseœÄ = baseœÄ)
    (mulœÄ : Œ† x y, loopœÄ (x * y) = loopœÄ x ‚¨ù loopœÄ y) (groupoidœÄ : groupoid œÄ) :
    Œ† x, (rec baseœÄ loopœÄ mulœÄ @groupoidœÄ) # (loop x) = loopœÄ x

  attribute [irreducible] K1

  instance : dotted (K1 Œ±) := ‚ü®base‚ü©

  instance : has_mul (Œ©¬π(K1 Œ±)) := ‚ü®Œª p q, p ‚¨ù q‚ü©
  instance : has_one (Œ©¬π(K1 Œ±)) := ‚ü®idp base‚ü©
  instance : has_inv (Œ©¬π(K1 Œ±)) := ‚ü®Id.inv‚ü©

  noncomputable instance : magma (Œ©¬π(K1 Œ±)) :=
  begin split, apply grpd end

  noncomputable instance : semigroup (Œ©¬π(K1 Œ±)) :=
  begin split, intros p q r, symmetry, apply Id.assoc end

  noncomputable instance : monoid (Œ©¬π(K1 Œ±)) := begin
    split; intro p, apply Id.refl_left, apply Id.refl_right
  end

  noncomputable instance : group (Œ©¬π(K1 Œ±)) :=
  begin split, intro p, apply Id.inv_comp end

  noncomputable def homomorphism : Œ± ‚§≥ Œ©¬π(K1 Œ±) :=
  ‚ü®loop, loop.mul‚ü©

  noncomputable def loop.one : loop 1 = idp base :> Œ©¬π(K1 Œ±) :=
  by apply group.homo_saves_unit homomorphism

  noncomputable def loop.inv (p : Œ±) : loop p‚Åª¬π = (loop p)‚Åª¬π :=
  by apply group.homo_respects_inv homomorphism

  @[hott] noncomputable def family
    (baseœÄ : Type u)
    (loopœÄ : Œ± ‚Üí baseœÄ = baseœÄ)
    (mulœÄ : Œ† x y, loopœÄ (x * y) = loopœÄ x ‚¨ù loopœÄ y)
    (setœÄ : hset baseœÄ) : K1 Œ± ‚Üí (0-Type) := begin
    fapply rec,
    { existsi baseœÄ, apply zero_eqv_set.left,
      intros p q, apply setœÄ },
    { intro x, fapply sigma.prod, apply loopœÄ x,
      apply ntype_is_prop },
    { intros x y, symmetry,
      transitivity, symmetry, apply sigma.prod_comp,
      fapply sigma.prod_eq, { symmetry, apply mulœÄ },
      { apply prop_is_set, apply ntype_is_prop } },
    { apply ens_is_groupoid }
  end

  @[hott] noncomputable def code' : K1 Œ± ‚Üí (0-Type) := begin
    fapply family, exact Œ±,
    { intro x, apply ground_zero.ua, existsi (* x), split;
      existsi (* x‚Åª¬π); intro y; change _ * _ * _ = _,
      repeat { transitivity, apply semigroup.mul_assoc,
               transitivity, apply Id.map },
      apply group.mul_right_inv, apply monoid.mul_one,
      apply group.mul_left_inv, apply monoid.mul_one },
    { intros x y, symmetry, transitivity,
      { symmetry, apply ground_zero.ua.ua_trans },
      apply Id.map ua, fapply sigma.prod,
      { apply ground_zero.theorems.funext, intro z,
        apply semigroup.mul_assoc },
      { apply biinv_prop } },
    { apply magma.set }
  end

  @[hott] def code : K1 Œ± ‚Üí Type u := sigma.fst ‚àò code'

  @[hott] noncomputable def code.hset : Œ† (z : K1 Œ±), hset (code z) := begin
    intro z, fapply ind _ _ _ _ z,
    { change hset Œ±, apply magma.set },
    { intro x, change _ = _, apply set_is_prop },
    { intros x y, change _ = _, apply prop_is_set,
      apply set_is_prop },
    { intro x, apply one_eqv_groupoid.forward,
      apply prop_is_ntype _ 0, apply set_is_prop }
  end

  @[hott] noncomputable def hset_base : hset (@code Œ± _ base) :=
  by intros p q; apply code.hset base

  @[hott] def encode : Œ† (z : K1 Œ±), base = z ‚Üí code z :=
  Œª z p, equiv.transport code p (1 : Œ±)

  @[hott] noncomputable def decode : Œ† (z : K1 Œ±), code z ‚Üí base = z := begin
    intro z, fapply ind _ _ _ _ z,
    { exact loop },
    { intro x, change _ = _, transitivity,
      apply @equiv.transport_characterization (K1 Œ±) code (Œª x, base = x),
      apply ground_zero.theorems.funext, intro y,
      transitivity, apply Id.map (Œª p, equiv.transport (Œª x, base = x) (loop x) (loop p)),
      transitivity, apply equiv.transport_to_transportconst,
      transitivity, apply Id.map (Œª p, equiv.transportconst p y),
      transitivity, apply Id.map_inv, apply Id.map,
      transitivity, apply equiv.map_over_comp,
      transitivity, apply Id.map, apply recŒ≤rule,
      apply sigma.map_fst_over_prod,
      transitivity, apply equiv.transportconst_over_inv,
      apply ground_zero.ua.transportconst_inv_rule,
      transitivity, apply equiv.transport_over_inv_contr_map,
      transitivity, apply Id.map, apply equiv.idmap,
      transitivity, apply Id.map (‚¨ù loop x), apply loop.mul,
      transitivity, symmetry, apply Id.assoc,
      transitivity, apply Id.map, apply Id.map (‚¨ù loop x), apply loop.inv,
      transitivity, apply Id.map, apply Id.inv_comp, apply Id.refl_right },
    { intros x y,
      apply zero_eqv_set.forward,
      apply pi_respects_ntype 0,
      intro z, apply zero_eqv_set.left,
      apply grpd },
    { intro x, apply one_eqv_groupoid.forward,
      apply pi_respects_ntype 1,
      intro z, apply hlevel.cumulative 0,
      apply zero_eqv_set.left, apply grpd }
  end

  @[hott] noncomputable def encode_decode :
    Œ† (z : K1 Œ±) (p : code z), encode z (decode z p) = p := begin
    intros z p, fapply @ind Œ± _ (Œª z,
      Œ† (p : code z), encode z (decode z p) = p) _ _ _ _ z,
    { intro x, change Œ± at x, change encode base (loop x) = _,
      transitivity, apply equiv.transport_to_transportconst,
      transitivity, apply Id.map (Œª p, equiv.transportconst p (1 : Œ±)),
      transitivity, apply equiv.map_over_comp,
      transitivity, apply Id.map, apply recŒ≤rule,
      apply sigma.map_fst_over_prod,
      transitivity, apply ground_zero.ua.transportconst_rule,
      apply monoid.one_mul },
    { intros, apply ground_zero.theorems.funext, intro x,
      apply hset_base },
    { intros x y, apply prop_is_set,
      apply pi_prop, intro x, apply hset_base },
    { intro x, apply one_eqv_groupoid.forward,
      apply prop_is_ntype _ 0,
      intros p q, apply ground_zero.theorems.funext,
      intro y, apply code.hset x }
  end

  @[hott] noncomputable def decode_encode :
    Œ† (z : K1 Œ±) (p : base = z), decode z (encode z p) = p :=
  begin intros z p, induction p, apply loop.one end

  @[hott] noncomputable def univ : Œ± ‚âÖ Œ©¬π(K1 Œ±) := begin
    existsi loop, split,
    { intros x y, apply loop.mul },
    split; existsi encode base,
    { apply encode_decode base },
    { apply decode_encode base }
  end
end K1

end ground_zero.algebra