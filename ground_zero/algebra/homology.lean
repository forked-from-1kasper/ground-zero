import ground_zero.algebra.group
open ground_zero ground_zero.algebra (abelian) ground_zero.algebra.group

namespace ground_zero.algebra
universe u

hott theory

namespace homology
  structure chain_complex :=
  (K    : ‚Ñï ‚Üí group)
  (ab   : Œ† n, abelian (K n))
  (Œ¥    : Œ† n, K (n + 1) ‚§≥ K n)
  (triv : Œ† n, Œ¥ n ‚ãÖ Œ¥ (n + 1) = 0)

  instance (C : chain_complex) (n : ‚Ñï) : abelian (C.K n) := C.ab n

  abbreviation Œ∂ (C : chain_complex) (n : ‚Ñï) :=
  ker (C.Œ¥ n)

  abbreviation Z (C : chain_complex) (n : ‚Ñï) :=
  group.subgroup.group _ (Œ∂ C n)

  abbreviation B (C : chain_complex) (n : ‚Ñï) :=
  algebra.group.subgroup.inter (im (C.Œ¥ (n + 1)).fst) (Œ∂ C n)

  instance (C : chain_complex) (n : ‚Ñï) : Z C n ‚äµ B C n :=
  group.abelian_subgroup_is_normal _ _

  noncomputable def H (C : chain_complex) (n : ‚Ñï) :=
  (Z C n)\(B C n)
end homology

namespace digon
  open homology (B Z H)

  @[hott] noncomputable def K : ‚Ñï ‚Üí group
  |    0    := FAb ùüê -- two points
  |    1    := FAb ùüê -- and two paths between them
  | (n + 2) := Z‚ÇÅ    -- and no higher-dimensional paths

  noncomputable instance K.abelian : Œ† n, abelian (K n)
  |    0    := by change abelian (FAb _); apply_instance
  |    1    := by change abelian (FAb _); apply_instance
  | (n + 2) := by change abelian Z‚ÇÅ; apply_instance

  noncomputable def Œ¥ : Œ† n, K (n + 1) ‚§≥ K n
  |    0    :=
  FAb.homomorphism
    (Œª x, match x with
    | ff := right_div (FAb.elem tt) (FAb.elem ff)
    | tt := right_div (FAb.elem ff) (FAb.elem tt)
    end)
  | (n + 1) := 0

  noncomputable def C : homology.chain_complex :=
  ‚ü®K, K.abelian, Œ¥, begin
    intro n, apply homo.funext,
    intro x, induction x,
    induction n; reflexivity
  end‚ü©

  @[hott] noncomputable def im‚Çô.encode (n : ‚Ñï) : B C n ‚äÜ triv (Z C n) :=
  begin
    intro x, fapply HITs.merely.rec, apply ens.prop,
    { intro p, induction p with y p,
      induction y, fapply types.sigma.prod,
      apply p, apply ens.prop }
  end

  @[hott] noncomputable def im‚Çô.decode (n : ‚Ñï) : triv (Z C n) ‚äÜ B C n :=
  begin
    intros x p, induction p,
    apply HITs.merely.elem,
    existsi ‚òÖ, reflexivity
  end

  @[hott] noncomputable def split (n : ‚Ñï) : H C n ‚âÖ Z C n := calc
    H C n ‚âÖ Z C n \ triv (Z C n) : factor.iso (im‚Çô.encode n) (im‚Çô.decode n)
      ... ‚âÖ Z C n                : iso.symm group.triv.factor
end digon

end ground_zero.algebra