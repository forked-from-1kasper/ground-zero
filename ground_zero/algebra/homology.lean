import ground_zero.algebra.group
open ground_zero ground_zero.algebra (abelian) ground_zero.algebra.group

namespace ground_zero.algebra
universe u

hott theory

namespace homology
  structure chain_complex :=
  (K    : ‚Ñï ‚Üí group)
  (ab   : Œ† n, abelian (K n))
  (Œ¥    : Œ† n, K (n + 1) ‚§≥ K n)
  (triv : Œ† n, Œ¥ n ‚ãÖ Œ¥ (n + 1) = 0)

  instance (C : chain_complex) (n : ‚Ñï) : abelian (C.K n) := C.ab n

  abbreviation Œ∂ (C : chain_complex) (n : ‚Ñï) :=
  ker (C.Œ¥ n)

  abbreviation Z (C : chain_complex) (n : ‚Ñï) :=
  group.subgroup.group _ (Œ∂ C n)

  abbreviation B (C : chain_complex) (n : ‚Ñï) :=
  algebra.group.subgroup.inter (im (C.Œ¥ (n + 1)).fst) (Œ∂ C n)

  instance (C : chain_complex) (n : ‚Ñï) : B C n ‚ä¥ Z C n :=
  group.abelian_subgroup_is_normal _ _

  noncomputable def H (C : chain_complex) (n : ‚Ñï) :=
  (Z C n)\(B C n)
end homology

namespace digon
  noncomputable def K : ‚Ñï ‚Üí group
  | 0 := FAb ùüê -- two points
  | 1 := FAb ùüê -- and two paths between them
  | _ := Z‚ÇÅ     -- and no higher-dimensional paths

  noncomputable instance K.abelian : Œ† n, abelian (K n)
  |    0    := by change abelian (FAb _); apply_instance
  |    1    := by change abelian (FAb _); apply_instance
  | (n + 2) := by change abelian Z‚ÇÅ; apply_instance

  noncomputable def Œ¥ : Œ† n, K (n + 1) ‚§≥ K n
  |    0    :=
  FAb.homomorphism
    (Œª x, match x with
    | ff := right_div (FAb.elem tt) (FAb.elem ff)
    | tt := right_div (FAb.elem ff) (FAb.elem tt)
    end)
  | (n + 1) := 0

  noncomputable def C : homology.chain_complex :=
  ‚ü®K, K.abelian, Œ¥, begin
    intro n, apply homo.funext,
    intro x, induction x,
    induction n; reflexivity
  end‚ü©
end digon

end ground_zero.algebra