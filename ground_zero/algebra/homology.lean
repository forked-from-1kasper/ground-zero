import ground_zero.algebra.group
open ground_zero ground_zero.algebra (abelian) ground_zero.algebra.group

namespace ground_zero.algebra
universe u

hott theory

namespace homology
  structure chain_complex :=
  (K : ‚Ñï ‚Üí Type u)
  (is_abelian : Œ† n, abelian (K n))
  (Œ¥ : Œ† n, K (n + 1) ‚§≥ K n)
  (triv : Œ† n, Œ¥ n ‚ãÖ Œ¥ (n + 1) = 0)

  instance chain_complex.abelian (C : chain_complex) (n : ‚Ñï) : abelian (C.K n) :=
  C.is_abelian n

  abbreviation Œ∂ (C : chain_complex) (n : ‚Ñï) :=
  ker (C.Œ¥ n)

  abbreviation Z (C : chain_complex) (n : ‚Ñï) :=
  (Œ∂ C n).subtype

  abbreviation B (C : chain_complex) (n : ‚Ñï) :=
  algebra.group.subgroup.inter (im (C.Œ¥ (n + 1)).fst) (Œ∂ C n)

  def H (C : chain_complex) (n : ‚Ñï) :=
  (Z C n)/(B C n)
end homology

namespace digon
  def K : ‚Ñï ‚Üí Type
  | 0 := FAb ùüê -- two points
  | 1 := FAb ùüê -- and two paths between them
  | _ := ùüè     -- and no higher-dimensional paths

  noncomputable instance K.abelian : Œ† n, abelian (K n)
  |    0    := by apply FAb.abelian
  |    1    := by apply FAb.abelian
  | (n + 2) := by apply group.unit_is_abelian

  noncomputable def Œ¥ : Œ† n, K (n + 1) ‚§≥ K n
  |    0    :=
  FAb.homomorphism
    (Œª x, match x with
    | ff := FAb.elem tt / FAb.elem ff
    | tt := FAb.elem ff / FAb.elem tt
    end)
  | (n + 1) := 0

  noncomputable def C : homology.chain_complex :=
  ‚ü®K, K.abelian, Œ¥, begin
    intro n, apply homo.funext,
    intro x, induction x,
    induction n; reflexivity
  end‚ü©
end digon

end ground_zero.algebra