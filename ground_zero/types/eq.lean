import ground_zero.proto ground_zero.meta.hott_theory

namespace ground_zero.types
universes u v

theorem UIP {Œ± : Type u} {a b : Œ±} (p q : a = b) : p = q :=
by trivial

inductive eq {Œ± : Type u} (a : Œ±) : Œ± ‚Üí Type u
| refl : eq a

attribute [refl] eq.refl

hott theory
notation a ` = ` b ` :> ` Œ± := @eq Œ± a b

/- fails!
theorem UIP‚ÇÅ {Œ± : Type u} {a b : Œ±} (p q : a = b :> Œ±) :
  p = q :> (a = b :> Œ±) :=
by trivial
-/

abbreviation idp {Œ± : Type u} (a : Œ±) : a = a :> Œ± := eq.refl a

namespace eq
  @[inline] def rfl {Œ± : Type u} {a : Œ±} : a = a :> Œ± :=
  eq.refl a

  @[trans] def trans {Œ± : Type u} {a b c : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) : a = c :> Œ± :=
  begin induction p, assumption end

  @[symm] def symm {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    b = a :> Œ± :=
  begin induction p, reflexivity end

  abbreviation inv {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) := symm p

  infixr ` ‚¨ù ` := trans
  postfix ‚Åª¬π := symm

  def comp_inv {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p ‚¨ù p‚Åª¬π = eq.refl a :> a = a :> Œ± :=
  begin induction p, trivial end

  def inv_comp {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p‚Åª¬π ‚¨ù p = eq.refl b :> b = b :> Œ± :=
  begin induction p, trivial end

  def refl_left {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    eq.refl a ‚¨ù p = p :> a = b :> Œ± :=
  begin induction p, trivial end

  def refl_right {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p ‚¨ù eq.refl b = p :> a = b :> Œ± :=
  begin induction p, trivial end

  def refl_twice {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    rfl ‚¨ù p ‚¨ù rfl = p :> a = b :> Œ± :=
  begin induction p, trivial end

  def explode_inv {Œ± : Type u} {a b c : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) :
    (p ‚¨ù q)‚Åª¬π = q‚Åª¬π ‚¨ù p‚Åª¬π :> c = a :> Œ± :=
  begin induction p, induction q, trivial end

  def inv_inv {Œ± : Type u} {a b : Œ±}
    (p : a = b :> Œ±) : (p‚Åª¬π)‚Åª¬π = p :> a = b :> Œ± :=
  begin induction p, trivial end

  def assoc {Œ± : Type u} {a b c d : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) (r : c = d :> Œ±) :
    p ‚¨ù (q ‚¨ù r) = (p ‚¨ù q) ‚¨ù r :=
  begin induction p, trivial end

  def mpr {Œ± Œ≤ : Type u} (p : Œ± = Œ≤) : Œ≤ ‚Üí Œ± :=
  begin induction p, intro x, exact x end

  def map {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±) : f a = f b :> Œ≤ :=
  begin induction p, reflexivity end
  infix [parsing_only] ` # ` := map

  def map_inv {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±) : (f # p‚Åª¬π) = (f # p)‚Åª¬π :=
  begin induction p, reflexivity end

  section
    variables {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
              (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±)

    abbreviation cong := map f p
    abbreviation ap := map f p
  end

  def ap‚ÇÇ {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    {p q : a = b :> Œ±} (f : Œ± ‚Üí Œ≤)
    (r : p = q :> a = b :> Œ±) :
    f # p = f # q :> f a = f b :> Œ≤ :=
  begin induction r, reflexivity end

  class dotted (space : Type u) :=
  (point : space)

  structure pointed :=
  (space : Type u) (point : space)

  def loop_space (X : pointed) : pointed :=
  ‚ü®X.point = X.point :> X.space, eq.refl X.point‚ü©

  def iterated_loop_space : pointed ‚Üí ‚Ñï ‚Üí pointed
  | X 0 := X
  | X (n + 1) := iterated_loop_space (loop_space X) n

  def loop_pointed_space (Œ± : Type u) [h : dotted Œ±] :=
  iterated_loop_space ‚ü®Œ±, dotted.point Œ±‚ü©

  notation `Œ©` `[` n `]` `, ` X := (iterated_loop_space X n).space
  notation `Œò` `[` n `]` `, ` X := (iterated_loop_space X n).point

  notation `Œ©¬π`:25 X := (loop_pointed_space X 1).space
end eq

namespace not
  notation `¬¨` a := a ‚Üí (ùüé : Type)
  notation a ` ‚â† ` b := ¬¨(a = b :> _)

  def absurd {Œ± : Type u} {Œ≤ : Type v} (h : Œ±) (g : ¬¨Œ±) : Œ≤ :=
  ground_zero.proto.empty.cases_on (Œª _, Œ≤) (g h)
end not

namespace whiskering
  variables {Œ± : Type u} {a b c : Œ±}
  variables {p q : a = b :> Œ±} {r s : b = c :> Œ±}
  variables {ŒΩ : p = q} {Œ∫ : r = s}

  def right_whs (ŒΩ : p = q) (r : b = c) : p ‚¨ù r = q ‚¨ù r := begin
    induction r,
    exact (eq.refl_right p) ‚¨ù ŒΩ ‚¨ù (eq.refl_right q)‚Åª¬π
  end
  infix ` ‚¨ù·µ£ `:60 := right_whs

  def left_whs (q : a = b) (Œ∫ : r = s) : q ‚¨ù r = q ‚¨ù s := begin
    induction q,
    exact (eq.refl_left r) ‚¨ù Œ∫ ‚¨ù (eq.refl_left s)‚Åª¬π
  end
  infix ` ‚¨ù‚Çó `:60 := left_whs

  def horizontal_comp‚ÇÅ (ŒΩ : p = q) (Œ∫ : r = s) :=
  (ŒΩ ‚¨ù·µ£ r) ‚¨ù (q ‚¨ù‚Çó Œ∫)
  infix ` ‚ãÜ `:65 := horizontal_comp‚ÇÅ

  def horizontal_comp‚ÇÇ (ŒΩ : p = q) (Œ∫ : r = s) :=
  (p ‚¨ù‚Çó Œ∫) ‚¨ù (ŒΩ ‚¨ù·µ£ s)
  infix ` ‚ãÜ‚Ä≤ `:65 := horizontal_comp‚ÇÇ

  lemma comp_uniq : ŒΩ ‚ãÜ Œ∫ = ŒΩ ‚ãÜ‚Ä≤ Œ∫ := begin
    induction p, induction r, induction ŒΩ, induction Œ∫,
    reflexivity
  end

  lemma loop‚ÇÅ {Œ± : Type u} {a : Œ±}
    {ŒΩ Œ∫ : eq.refl a = eq.refl a} :
    ŒΩ ‚¨ù Œ∫ = ŒΩ ‚ãÜ Œ∫ := begin
    symmetry, unfold horizontal_comp‚ÇÅ,
    unfold right_whs, unfold left_whs,
    transitivity,
    { apply eq.map, apply eq.refl_twice },
    apply eq.map (Œª p, p ‚¨ù Œ∫), apply eq.refl_twice
  end

  lemma loop‚ÇÇ {Œ± : Type u} {a : Œ±}
    {ŒΩ Œ∫ : eq.refl a = eq.refl a} :
    ŒΩ ‚ãÜ‚Ä≤ Œ∫ = Œ∫ ‚¨ù ŒΩ := begin
    unfold horizontal_comp‚ÇÇ,
    unfold right_whs, unfold left_whs,
    transitivity,
    { apply eq.map, apply eq.refl_twice },
    apply eq.map (Œª p, p ‚¨ù ŒΩ), apply eq.refl_twice
  end

  theorem ¬´Eckmann‚ÄìHilton argument¬ª {Œ± : Type u} {a : Œ±}
    (ŒΩ Œ∫ : eq.refl a = eq.refl a) : ŒΩ ‚¨ù Œ∫ = Œ∫ ‚¨ù ŒΩ :=
  loop‚ÇÅ ‚¨ù comp_uniq ‚¨ù loop‚ÇÇ
end whiskering

end ground_zero.types